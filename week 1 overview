
RTL Workshop â€“ Week 1

ðŸ“Œ Overview

This project documents my Week-1 progress in the RTL (Register Transfer Level) Workshop.
I practiced Verilog RTL design, simulation, synthesis, and optimization using Sky130 PDK with open-source tools (iverilog, gtkwave, yosys).


---

ðŸ”¹ Day-wise Learning

Day 1 â€“ RTL Design & Simulation

Introduction to Verilog syntax and RTL design flow.

Designed simple modules: Multiplexer, Adder, D-Flip Flop.

Simulated with Icarus Verilog and viewed waveforms in GTKWave.

First synthesis run using Yosys + Sky130 PDK.
âœ… Learning: Importance of clean testbenches and RTL-to-gate mapping.



---

Day 2 â€“ Timing Libraries & Flip-Flops

Studied .lib timing library files and delay models.

Understood setup/hold constraints and arc definitions.

Wrote efficient D-Flip Flop codes with synchronous reset.
âœ… Learning: RTL coding style directly impacts synthesis and timing.



---

Day 3 â€“ Optimization of Logic

Learned techniques for logic optimization (reducing gate depth, FSM improvements).

Optimized earlier modules (adder, mux).

Compared pre- vs post-synthesis reports.
âœ… Learning: Optimization improves area and delay without changing functionality.



---

Day 4 â€“ Gate Level Simulation (GLS)

Performed GLS using netlists generated by synthesis.

Studied blocking vs non-blocking assignments.

Observed simulationâ€“synthesis mismatches (e.g. unintended latches).
âœ… Learning: Always use non-blocking (<=) in sequential blocks.



---

Day 5 â€“ Synthesis Optimizations

Explored advanced optimizations:

Resource sharing

Retiming

Logic restructuring


Applied on FSM and counters, measured delay + gate count improvements.
âœ… Learning: Optimization requires balancing area, speed, and power.



---

ðŸ›  Tools Used

Icarus Verilog â†’ RTL simulation

GTKWave â†’ Waveform visualization

Yosys â†’ Synthesis with Sky130 PDK

Sky130 Standard Cell Libraries



---

ðŸ“‚ Week 1 Deliverables

âœ” Combinational Design: 4:1 MUX, Comparator

âœ” Sequential Design: Counter, FSM

âœ” Testbenches + Waveform screenshots

âœ” Synthesized Netlists + GLS verification

âœ” Optimization report (before vs after synthesis)



---

ðŸ“– Key Takeaways

RTL coding style is critical for synthesis accuracy.

.lib timing libraries define real-world behavior.

Simulation + GLS together ensure functional correctness.

Optimization is iterative and requires trade-offs.

Built a solid foundation in RTL design flow using open-source EDA tools.
